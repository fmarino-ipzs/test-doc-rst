#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# -- PROJECT Variables ----------------------------------------------------
settings_project_name = "Technical Documentation"
settings_editor_name = 'FAM'
settings_doc_version = '1.0.0'
settings_doc_release = "versione-corrente"
settings_basename = 'technical-docs'
settings_file_name = 'technical-docs'

version = settings_doc_version


import sys, os
from pathlib import Path
confdir = Path(__file__).resolve().parent
# -- RTD configuration -------------------------------------------------

# on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

# This is used for linking and such so we link to the thing we're building
rtd_version = os.environ.get('READTHEDOCS_VERSION', 'latest')
if rtd_version not in ['stable', 'latest']:
    rtd_version = 'latest'

rtd_project = os.environ.get('READTHEDOCS_PROJECT', '')

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = '7.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.ifconfig',
    'sphinx.ext.autosectionlabel',
    'sphinxcontrib.redoc',
    'myst_parser',
    'sphinxcontrib.plantuml',  
]

plantuml_jar = confdir.parent.parent / "utils/plantuml/plantuml-1.2025.2.jar"
plantuml = f'java -jar {str(plantuml_jar)}'
plantuml_output_format = 'svg'
plantuml_latex_output_format = 'pdf'

images_config = {
    "default_image_width": "99%",
    "align": "center"
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = ['.rst', '.md']

# The encoding of source files.
#source_encoding = 'utf-8-sig'
source_encoding = 'utf-8'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = settings_project_name
# copyright = settings_copyright_copyleft

# URL of Discourse instance used by sphinxcontrib.discourse extension
# discourse_url = settings_discourse_url

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
# version = settings_doc_version
# The full version, including alpha/beta/rc tags.
# release = settings_doc_release

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = 'en'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['.DS_Store', 'README', 'README.md', '.venv*', '.env*']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# -- myst-parser setup --------------------------------------------------------
# Configurazione per myst_parser che sostituisce recommonmark
myst_enable_extensions = [
    "colon_fence",
    "smartquotes",
    "replacements",
    "deflist",
]

# Configurazione simile ad AutoStructify di recommonmark
myst_heading_anchors = 3
myst_enable_auto_toc_tree = True
myst_update_mathjax = False

# -- Options for HTML output ----------------------------------------------
html_theme = 'piccolo_theme'

# html_theme_path = [docs_italia_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further. For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    # This option can be used with docs-italia-theme to customise how the versions "badge" is shown:
    # 'False': default (alabaster) badge | 'True': custom (italia) badge
    # 'custom_versions_badge': True,
    #'collapse_navigation': True,
    "show_theme_credit": False,
    "source_url": 'https://github.com/fmarino-ipzs/test-doc-rst/',
    "source_icon": "github",
    # "banner_text": 'We just launched a newletter, <a href="https://mynewsletter.com/">please subscribe</a>!'
}



# The name for this set of Sphinx documents. If None, it defaults to
# "<project> v<release> documentation".
html_title = f"{settings_project_name} - {version}"

# A shorter title for the navigation bar. Default is the same as html_title.
# html_short_title = "IT-Wallet"

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = "https://avatars.githubusercontent.com/u/15377824?s=48&v=4"

# The name of an image file (within the static path) to use as favicon of the
# docs. This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = ""

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
#html_static_path = ['../../static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# html_extra_path = ["../common"]

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%d/%m/%Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = False

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it. The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = settings_basename + 'doc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
'papersize': 'a4paper',

# The font size ('10pt', '11pt' or '12pt').
'pointsize': '10pt',

'sphinxsetup': 'verbatimforcewraps=true',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
# author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', settings_file_name + '.tex', settings_project_name, settings_editor_name, 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = "https://avatars.githubusercontent.com/u/15377824?s=48&v=4"

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
latex_use_parts = True

# If true, show page references after internal links.
latex_show_pagerefs = True

# If true, show URL addresses after external links.
latex_show_urls = "inline"

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', settings_file_name, settings_project_name,
     [settings_editor_name], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
# dir menu entry, description, category)
texinfo_documents = [
  (
    'index',
    settings_file_name,
    settings_project_name,
    settings_project_name,
    settings_project_name,
    'Miscellaneous'
  )
]

numfig = True

# to turn smartquotes off and be able to use
smartquotes = False

autosectionlabel_prefix_document= True


# # Funzione per convertire SVG in PDF
# def convert_svg_to_pdf(srcdir):
#     """Converte tutti i file SVG nella directory di origine in PDF usando Python"""
#     # Rileva la directory dei sorgenti

#     print(f"Cercando SVG in {srcdir}")
    
#     # Trova tutti i file SVG
#     svg_files = []
#     for root, dirs, files in os.walk(srcdir):
#         for file in files:
#             if file.endswith('.svg'):
#                 svg_files.append(os.path.join(root, file))
    
#     print(f"Trovati {len(svg_files)} file SVG")
    
#     # Use svglib to cnvert
#     svglib_available = False
#     try:
#         from svglib.svglib import svg2rlg
#         from reportlab.graphics import renderPDF
#         svglib_available = True
#         print("Utilizzo svglib per la conversione SVG→PDF")
#     except ImportError:
#         print("svglib non disponibile")
    
#     # Converti ogni SVG in PDF
#     for svg_file in svg_files:
#         pdf_file = svg_file.replace('.svg', '.pdf')
#         converted = False
        
#         # Prova prima con svglib se disponibile
#         if svglib_available:
#             try:
#                 print(f"Conversione con svglib: {svg_file} → {pdf_file}")
#                 drawing = svg2rlg(svg_file)
#                 renderPDF.drawToFile(drawing, pdf_file)
#                 print(f"✓ Convertito con successo usando svglib")
#                 converted = True
#             except Exception as e:
#                 print(f"✗ Errore nella conversione con svglib: {e}")
#         if not converted:
#             print(f"! Impossibile convertire {svg_file} in PDF con gli strumenti disponibili")

# # Collegamento evento solo se siamo in modalità LaTeX
# def setup(app):
#     app.connect('builder-inited', on_builder_init)
#     confdir = app.confdir  # Directory di configurazione
#     return {
#         'version': '0.1',
#         'parallel_read_safe': True,
#         'parallel_write_safe': True,
#     }

# def on_builder_init(app):
#     if app.builder.name == 'latex':
#         imgdir = os.path.join(app.confdir,'../../images')   # Directory sorgente
#         srcdir = app.srcdir  # Directory sorgente
#         confdir = app.confdir  # Directory di configurazione
#         outdir = app.outdir  # Directory di output
#         print(f"Directory di configurazione: {confdir}")
#         print(f"Directory sorgente: {srcdir}")
#         print(f"Directory output: {outdir}")
#         print(f"Directory sorgente: {imgdir}")
#         try:
#             convert_svg_to_pdf(imgdir)
#         except Exception as e:
#             print(f"Errore durante la conversione SVG→PDF: {e}")
#             print("Il processo di build continuerà, ma le immagini SVG potrebbero non apparire nel PDF.")
