name: gh-pages

on:
  push:
    branches:
      - 'versione-corrente'
    paths:
      - 'docs/**' # trigger only if there are changes in docs path
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'docs/**' # trigger only if there are changes in docs path
  release:
    types:
      - published

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    #if: github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install Python 
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: "x64" # optional x64 or x86. Defaults to x64 if not specified

      # Install Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install Graphviz required for plantuml
      - name: Install Graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      # Install python dependancies 
      - name: Install deps
        run: |-
          python -m pip install -r requirements-dev.txt

      - name: Generate deployment paths
        id: deployment
        run: |
          # Debug information
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub head ref: $GITHUB_HEAD_REF"
          echo "GitHub ref type: $GITHUB_REF_TYPE"
          echo "Event name: ${{ github.event_name }}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "path=prs/pr${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
            echo "path=releases/${TAG}" >> $GITHUB_OUTPUT
          else 
            # this is the case where we have a push on default branch, i.e "${{ github.ref }}" == "refs/heads/${{ github.event.repository.default_branch }}"
            echo "path=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT
          fi

      # Run Sphinx build for HTML output
      - name: Build branch
        run: |-
          # Create output directories
          mkdir -p "html/${{ steps.deployment.outputs.path }}/it"
          mkdir -p "html/${{ steps.deployment.outputs.path }}/en"

          echo "Building html/${{ steps.deployment.outputs.path }}/it"
          echo "Building html/${{ steps.deployment.outputs.path }}/en"

          sphinx-build -b html docs/it/ html/${{ steps.deployment.outputs.path }}/it
          sphinx-build -b html docs/en/ html/${{ steps.deployment.outputs.path }}/en

      - name: Copy generate_index python script
        run: |
          cp .github/scripts/generate_index.py html/generate_index.py

      - name: Deploy to GitHub Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: gh-pages
          build_dir: html
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-index:
      needs: build  # This ensures this job runs only after build and deploy jobs are succesfully completed
      runs-on: ubuntu-latest
      steps:
        # Check out the gh-pages branch
        - name: Checkout gh-pages branch
          uses: actions/checkout@v3
          with:
            ref: gh-pages  # Checkout the gh-pages branch

        # Clean up old PR directories
        - name: Clean up old PR directories
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            # Check if prs directory exists
            if [ ! -d "prs" ]; then
              echo "The prs directory does not exist. Nothing to clean."
              exit 0
            fi
            
            # Get list of active (open) PRs
            echo "Getting list of active PRs..."
            ACTIVE_PRS=$(gh pr list --state open --json number --repo $GITHUB_REPOSITORY | jq -r '.[].number')
            echo "Active PR numbers: $ACTIVE_PRS"
            
            # Initialize counter for removed directories
            REMOVED_COUNT=0
            
            # Check each PR directory
            for PR_DIR in prs/pr*; do
              if [ -d "$PR_DIR" ]; then
                # Extract PR number from directory name
                PR_NUM=$(echo "$PR_DIR" | grep -o -E 'pr[0-9]+' | sed 's/pr//')
                
                # Check if PR number is in active PRs list
                if ! echo "$ACTIVE_PRS" | grep -q "$PR_NUM"; then
                  echo "PR #$PR_NUM is not active, removing directory $PR_DIR"
                  #rm -rf "$PR_DIR"
                  find "$PR_DIR" -type f -delete
                  find "$PR_DIR" -type d -empty -delete
                  
                  
                  if [ -d "$PR_DIR" ]; then
                    echo "WARNING: Directory $PR_DIR still exists after removal attempt!"
                  else
                    echo "Successfully removed directory $PR_DIR"
                    REMOVED_COUNT=$((REMOVED_COUNT+1))
                  fi
                fi
              fi
            done
            
            echo "Removed $REMOVED_COUNT PR directories that were no longer active."
                
        # Install Python
        - uses: actions/setup-python@v4
          with:
            python-version: "3.10"
            
        # Run the Python script
        - name: Generate index.html
          run: |
            # Run the Python script
            python generate_index.py
            
        # Commit and push the new index.html back to gh-pages
        - name: Commit and push index.html
          run: |
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'actions@github.com'
            git add .
            git commit -m "Auto-generate index.html" || echo "No changes to commit"
            git push