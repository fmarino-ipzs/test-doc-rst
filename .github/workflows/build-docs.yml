name: gh-pages

on:
  push:
    branches:
      - '*'
    paths:
      - 'docs/**' # trigger only if there are changes in docs path
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'docs/**' # trigger only if there are changes in docs path
  release:
    types:
      - published

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    #if: github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Install Python 
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: "x64" # optional x64 or x86. Defaults to x64 if not specified

      # Install Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install Graphviz required for plantuml
      - name: Install Graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      # Install python dependancies 
      - name: Install deps
        run: |-
          python -m pip install -r requirements-dev.txt

      - name: Determine deployment path
        id: deployment
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "path=prs/pr${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            TAG="${{ github.event.release.tag_name }}"
            echo "path=releases/${TAG}" >> $GITHUB_OUTPUT
          else 
            # this is the case where we have a push on default branch, i.e "${{ github.ref }}" == "refs/heads/${{ github.event.repository.default_branch }}"
            echo "path=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT
          fi

          echo "Publishing $GITHUB_OUTPUT"

      # Run Sphinx build for HTML output
      - name: Build branch
        run: |-
        
          # Debug information
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub head ref: $GITHUB_HEAD_REF"
          echo "GitHub ref type: $GITHUB_REF_TYPE"
          echo "Event name: ${{ github.event_name }}"
          
          # Determine path for content
          if [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
            # For tags, extract the version number and create a versioned folder
            TAG=${GITHUB_REF#refs/}
            SUBPATH="${TAG}" # e.g. tags/v1.0.0
            echo "This is a tag build: $TAG"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, use the PR number
            PR_NUMBER="${{ github.event.pull_request.number }}"
            SUBPATH="prs/pr-${PR_NUMBER}" # e.g. prs/pr-53
            echo "This is a PR build: $PR_NUMBER"
          else
            # For branch pushes, use the branch name
            BRANCH=${GITHUB_REF#refs/heads/}
            SUBPATH="${BRANCH}" # e.g. versione-corrente, warning-removal
            echo "This is a branch build: $BRANCH"
          fi
          
          echo "Publishing $SUBPATH"
          
          # Create output directories
          mkdir -p "html/${{ steps.deployment.outputs.path }}/it"
          mkdir -p "html/${{ steps.deployment.outputs.path }}/en"

          echo "Building html/${{ steps.deployment.outputs.path }}/it"
          echo "Building html/${{ steps.deployment.outputs.path }}/en"

          sphinx-build -b html docs/it/ html/${{ steps.deployment.outputs.path }}/it
          sphinx-build -b html docs/en/ html/${{ steps.deployment.outputs.path }}/en

      # # Create main index.html
      # - name: Create GH page index
      #   run: |-
      #     touch html/.nojekyll
      #     echo '
      #     <html>
      #     <head>
      #       <title>EUDI Wallet docs</title>
      #       <meta name="viewport" content="initial-scale=1.0">
      #     </head>
      #     <body>
      #     <h1>EUDI Wallet docs</h1>

      #     <ul>
      #       <li><a href="main/it/">Italian version</a></li>
      #       <li><a href="main/en/">English version</a></li>
      #     </ul>
      #     </body>
      #     </html>' > html/index.html

      - name: Deploy to GitHub Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: gh-pages
          build_dir: html
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}